#include"header.hpp"


void Add(int x, int y)
{
	std::cout<<"Add(int x, int y)"<<std::endl;
	std::cout << x + y << std::endl;
}
void Add(double x, double y)
{ 	
	std::cout<<"Add(double x, double y)"<<std::endl;
	std::cout << x + y << std::endl;

}
void Add(float x, float y)
{
	std::cout<<"Add(float x, float y)"<<std::endl;
	std::cout << x + y << std::endl;

}


void Function_Overload_test(void)
{
	Add(5, 2);								// call Add(int x, int y)
	Add(5.1, 2.3);							//  Add(double x, double y)
	//Add(5.1, 2);                            // compiler error call of overloaded ‘Add(double, int)’ is ambiguous
	//Add(static_cast<double>(5.1), 2);        // compiler error 
	Add(static_cast<float>(5.1),static_cast<float>( 2));         //    Add(float x, float y) 
	Add(static_cast<double>(5.1),static_cast<double>( 2));       //    Add(double x, double y)
	// if we the double function id float , call of overloaded ‘Add(double, double)’ is ambiguous error will appear 
	// because by default the real numbers are double type so the compiler will ambiguous (cast to float or int ?)
	std::cout<<typeid(41.5).name()<<std::endl;       // d --> double type 
	int x = 10;
	int y = 20;
	/*
	Name Mangling
	� Unique names generated by the compiler for functions
	� Allows linker to link the call with the correct overloaded function
	� Name mangling algorithm varies from compiler to compiler
	� Depends on the type & number of function arguments
	� Consequently, C++ functions are not callable from C code
	� $unwind$?Add@@YAXHH@Z            this is the Name Mangling of function void Add(int x, int y)
	� $unwind$?Add@@YAXNN@Z            this is the Name Mangling of function void Add(double x, double y)
	*/
	
	/*
	extern "C"
	� Compiler directive applied on global functions and variables
	� Suppresses name mangling of the type on which it is applied
	� Can be applied only to one function in a set of overloaded functions
	� Allows C++ functions to be called from C or other languages
	� Apply on function declaration & definition
			//In .h file
				� extern "C" <function declaration>;
			//In.cpp file
				� extern "C" <function definition>{ }
	*/

	// because name Mangling in C++ we  can't use other languages with C++
	// the solution is to use extern c
	// 

	printString();      // hello from C       // the symbol of this fiunction i $unwind$printString
	AddInC(5, 6);       // 5 + 6 = 11		  // the symbol of this fiunction i $unwind$AddInC

	// extern "C" allow you to use C languages with C ++ without linking error because the symbols are differnt 

}

extern "C" {
	void printString(void)
	{
		printf("hello from C \n");
	}
	void AddInC(int x, int y)
	{
		printf("%d + %d = %d \n", x, y, x + y);
	}
}